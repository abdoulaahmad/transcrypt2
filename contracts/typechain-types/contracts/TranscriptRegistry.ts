/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TranscriptRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MINISTRY_ROLE"
      | "REGISTRAR_ROLE"
      | "UNIVERSITY_ROLE"
      | "getAccessKey"
      | "getBreakGlassStatus"
      | "getRoleAdmin"
      | "getTranscriptMeta"
      | "grantAccess"
      | "grantRole"
      | "hasRole"
      | "issueTranscript"
      | "releaseEmergencyAccess"
      | "renounceRole"
      | "requestAccess"
      | "requestBreakGlass"
      | "revokeAccess"
      | "revokeRole"
      | "setBreakGlassConsent"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRequested"
      | "AccessRevoked"
      | "BreakGlassConsentUpdated"
      | "BreakGlassRequested"
      | "EmergencyAccessGranted"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TranscriptIssued"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINISTRY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRAR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNIVERSITY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessKey",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBreakGlassStatus",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscriptMeta",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueTranscript",
    values: [BytesLike, AddressLike, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEmergencyAccess",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestAccess",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestBreakGlass",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBreakGlassConsent",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINISTRY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRAR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNIVERSITY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBreakGlassStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranscriptMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueTranscript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEmergencyAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBreakGlass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBreakGlassConsent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [
    transcriptId: BytesLike,
    accessor: AddressLike,
    keyCiphertext: BytesLike,
    grantedAt: BigNumberish
  ];
  export type OutputTuple = [
    transcriptId: string,
    accessor: string,
    keyCiphertext: string,
    grantedAt: bigint
  ];
  export interface OutputObject {
    transcriptId: string;
    accessor: string;
    keyCiphertext: string;
    grantedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRequestedEvent {
  export type InputTuple = [
    transcriptId: BytesLike,
    employer: AddressLike,
    requestedAt: BigNumberish
  ];
  export type OutputTuple = [
    transcriptId: string,
    employer: string,
    requestedAt: bigint
  ];
  export interface OutputObject {
    transcriptId: string;
    employer: string;
    requestedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [
    transcriptId: BytesLike,
    accessor: AddressLike,
    revokedAt: BigNumberish
  ];
  export type OutputTuple = [
    transcriptId: string,
    accessor: string,
    revokedAt: bigint
  ];
  export interface OutputObject {
    transcriptId: string;
    accessor: string;
    revokedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BreakGlassConsentUpdatedEvent {
  export type InputTuple = [
    transcriptId: BytesLike,
    student: AddressLike,
    consented: boolean,
    updatedAt: BigNumberish
  ];
  export type OutputTuple = [
    transcriptId: string,
    student: string,
    consented: boolean,
    updatedAt: bigint
  ];
  export interface OutputObject {
    transcriptId: string;
    student: string;
    consented: boolean;
    updatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BreakGlassRequestedEvent {
  export type InputTuple = [
    transcriptId: BytesLike,
    employer: AddressLike,
    requestedAt: BigNumberish
  ];
  export type OutputTuple = [
    transcriptId: string,
    employer: string,
    requestedAt: bigint
  ];
  export interface OutputObject {
    transcriptId: string;
    employer: string;
    requestedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyAccessGrantedEvent {
  export type InputTuple = [
    transcriptId: BytesLike,
    employer: AddressLike,
    keyCiphertext: BytesLike,
    fulfilledAt: BigNumberish
  ];
  export type OutputTuple = [
    transcriptId: string,
    employer: string,
    keyCiphertext: string,
    fulfilledAt: bigint
  ];
  export interface OutputObject {
    transcriptId: string;
    employer: string;
    keyCiphertext: string;
    fulfilledAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TranscriptIssuedEvent {
  export type InputTuple = [
    transcriptId: BytesLike,
    student: AddressLike,
    cid: string,
    transcriptHash: BytesLike,
    studentKeyCiphertext: BytesLike
  ];
  export type OutputTuple = [
    transcriptId: string,
    student: string,
    cid: string,
    transcriptHash: string,
    studentKeyCiphertext: string
  ];
  export interface OutputObject {
    transcriptId: string;
    student: string;
    cid: string;
    transcriptHash: string;
    studentKeyCiphertext: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TranscriptRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): TranscriptRegistry;
  waitForDeployment(): Promise<this>;

  interface: TranscriptRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MINISTRY_ROLE: TypedContractMethod<[], [string], "view">;

  REGISTRAR_ROLE: TypedContractMethod<[], [string], "view">;

  UNIVERSITY_ROLE: TypedContractMethod<[], [string], "view">;

  getAccessKey: TypedContractMethod<
    [transcriptId: BytesLike, accessor: AddressLike],
    [string],
    "view"
  >;

  getBreakGlassStatus: TypedContractMethod<
    [transcriptId: BytesLike, employer: AddressLike],
    [
      [boolean, boolean, boolean, bigint, bigint, bigint, string, string] & {
        consented: boolean;
        requested: boolean;
        fulfilled: boolean;
        consentedAt: bigint;
        requestedAt: bigint;
        fulfilledAt: bigint;
        consentedBy: string;
        fulfilledBy: string;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTranscriptMeta: TypedContractMethod<
    [transcriptId: BytesLike],
    [
      [string, string, string] & {
        student: string;
        cid: string;
        transcriptHash: string;
      }
    ],
    "view"
  >;

  grantAccess: TypedContractMethod<
    [transcriptId: BytesLike, accessor: AddressLike, keyCiphertext: BytesLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  issueTranscript: TypedContractMethod<
    [
      transcriptId: BytesLike,
      student: AddressLike,
      cid: string,
      transcriptHash: BytesLike,
      studentKeyCiphertext: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  releaseEmergencyAccess: TypedContractMethod<
    [transcriptId: BytesLike, employer: AddressLike, keyCiphertext: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  requestAccess: TypedContractMethod<
    [transcriptId: BytesLike],
    [void],
    "nonpayable"
  >;

  requestBreakGlass: TypedContractMethod<
    [transcriptId: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeAccess: TypedContractMethod<
    [transcriptId: BytesLike, accessor: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setBreakGlassConsent: TypedContractMethod<
    [transcriptId: BytesLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINISTRY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REGISTRAR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNIVERSITY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAccessKey"
  ): TypedContractMethod<
    [transcriptId: BytesLike, accessor: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBreakGlassStatus"
  ): TypedContractMethod<
    [transcriptId: BytesLike, employer: AddressLike],
    [
      [boolean, boolean, boolean, bigint, bigint, bigint, string, string] & {
        consented: boolean;
        requested: boolean;
        fulfilled: boolean;
        consentedAt: bigint;
        requestedAt: bigint;
        fulfilledAt: bigint;
        consentedBy: string;
        fulfilledBy: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTranscriptMeta"
  ): TypedContractMethod<
    [transcriptId: BytesLike],
    [
      [string, string, string] & {
        student: string;
        cid: string;
        transcriptHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<
    [transcriptId: BytesLike, accessor: AddressLike, keyCiphertext: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "issueTranscript"
  ): TypedContractMethod<
    [
      transcriptId: BytesLike,
      student: AddressLike,
      cid: string,
      transcriptHash: BytesLike,
      studentKeyCiphertext: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "releaseEmergencyAccess"
  ): TypedContractMethod<
    [transcriptId: BytesLike, employer: AddressLike, keyCiphertext: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestAccess"
  ): TypedContractMethod<[transcriptId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestBreakGlass"
  ): TypedContractMethod<[transcriptId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<
    [transcriptId: BytesLike, accessor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBreakGlassConsent"
  ): TypedContractMethod<
    [transcriptId: BytesLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRequested"
  ): TypedContractEvent<
    AccessRequestedEvent.InputTuple,
    AccessRequestedEvent.OutputTuple,
    AccessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "BreakGlassConsentUpdated"
  ): TypedContractEvent<
    BreakGlassConsentUpdatedEvent.InputTuple,
    BreakGlassConsentUpdatedEvent.OutputTuple,
    BreakGlassConsentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BreakGlassRequested"
  ): TypedContractEvent<
    BreakGlassRequestedEvent.InputTuple,
    BreakGlassRequestedEvent.OutputTuple,
    BreakGlassRequestedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAccessGranted"
  ): TypedContractEvent<
    EmergencyAccessGrantedEvent.InputTuple,
    EmergencyAccessGrantedEvent.OutputTuple,
    EmergencyAccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TranscriptIssued"
  ): TypedContractEvent<
    TranscriptIssuedEvent.InputTuple,
    TranscriptIssuedEvent.OutputTuple,
    TranscriptIssuedEvent.OutputObject
  >;

  filters: {
    "AccessGranted(bytes32,address,bytes,uint64)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRequested(bytes32,address,uint64)": TypedContractEvent<
      AccessRequestedEvent.InputTuple,
      AccessRequestedEvent.OutputTuple,
      AccessRequestedEvent.OutputObject
    >;
    AccessRequested: TypedContractEvent<
      AccessRequestedEvent.InputTuple,
      AccessRequestedEvent.OutputTuple,
      AccessRequestedEvent.OutputObject
    >;

    "AccessRevoked(bytes32,address,uint64)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "BreakGlassConsentUpdated(bytes32,address,bool,uint64)": TypedContractEvent<
      BreakGlassConsentUpdatedEvent.InputTuple,
      BreakGlassConsentUpdatedEvent.OutputTuple,
      BreakGlassConsentUpdatedEvent.OutputObject
    >;
    BreakGlassConsentUpdated: TypedContractEvent<
      BreakGlassConsentUpdatedEvent.InputTuple,
      BreakGlassConsentUpdatedEvent.OutputTuple,
      BreakGlassConsentUpdatedEvent.OutputObject
    >;

    "BreakGlassRequested(bytes32,address,uint64)": TypedContractEvent<
      BreakGlassRequestedEvent.InputTuple,
      BreakGlassRequestedEvent.OutputTuple,
      BreakGlassRequestedEvent.OutputObject
    >;
    BreakGlassRequested: TypedContractEvent<
      BreakGlassRequestedEvent.InputTuple,
      BreakGlassRequestedEvent.OutputTuple,
      BreakGlassRequestedEvent.OutputObject
    >;

    "EmergencyAccessGranted(bytes32,address,bytes,uint64)": TypedContractEvent<
      EmergencyAccessGrantedEvent.InputTuple,
      EmergencyAccessGrantedEvent.OutputTuple,
      EmergencyAccessGrantedEvent.OutputObject
    >;
    EmergencyAccessGranted: TypedContractEvent<
      EmergencyAccessGrantedEvent.InputTuple,
      EmergencyAccessGrantedEvent.OutputTuple,
      EmergencyAccessGrantedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TranscriptIssued(bytes32,address,string,bytes32,bytes)": TypedContractEvent<
      TranscriptIssuedEvent.InputTuple,
      TranscriptIssuedEvent.OutputTuple,
      TranscriptIssuedEvent.OutputObject
    >;
    TranscriptIssued: TypedContractEvent<
      TranscriptIssuedEvent.InputTuple,
      TranscriptIssuedEvent.OutputTuple,
      TranscriptIssuedEvent.OutputObject
    >;
  };
}
